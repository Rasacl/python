# 生成器是特定的迭代器
# 迭代器是从数据中取出元素，而生成器用于‘凭空’生成元素，他不会一次性将所有元素全部生成，而是按需一个一个的生成，所以从头到尾都只需占用一个元素的空间

# 节省空间，提高性能
# 想要得到庞大的数据，但又想他占用的空间少

# 生成器函数
# 使用yield语句返回一个结果，在每个结果中间，挂起函数的状态，然后可以再次运行该函数，从它挂起的地方继续运行

def squares(n):
    for i in range(n+1):
        yield i**2


a = squares(5)
for value in a:
    print(value)


# 生成器的创建 只要把列表中的[]变成()，就是生成器了
list1 = [i*2 for i in range(3)]

# 创建生成器表达式
gen = (i*2 for i in range(3))
print(type(gen))
print(gen)

# 生成器的优点
# 1 延迟计算，一次返回一个结果，不会一次性生成所有结果，对于大数据的处理将会非常有用
# 2. 节省内存
# 3 节省代码
